// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: commands.sql

package sqlc

import (
	"context"
)

const createCommand = `-- name: CreateCommand :exec
INSERT INTO commands (
  name, command
) VALUES (
  ?, ?
)
`

type CreateCommandParams struct {
	Name    string
	Command string
}

func (q *Queries) CreateCommand(ctx context.Context, arg CreateCommandParams) error {
	_, err := q.db.ExecContext(ctx, createCommand, arg.Name, arg.Command)
	return err
}

const deleteCommand = `-- name: DeleteCommand :exec
DELETE FROM commands
WHERE name = ?
`

func (q *Queries) DeleteCommand(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteCommand, name)
	return err
}

const deleteCommandById = `-- name: DeleteCommandById :exec
DELETE FROM commands
WHERE id = ?
`

func (q *Queries) DeleteCommandById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommandById, id)
	return err
}

const getCommand = `-- name: GetCommand :one
SELECT id, name, command
FROM commands
WHERE name = ? LIMIT 1
`

func (q *Queries) GetCommand(ctx context.Context, name string) (Command, error) {
	row := q.db.QueryRowContext(ctx, getCommand, name)
	var i Command
	err := row.Scan(&i.ID, &i.Name, &i.Command)
	return i, err
}

const getCommands = `-- name: GetCommands :many
SELECT id, name, command
FROM commands
`

func (q *Queries) GetCommands(ctx context.Context) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, getCommands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(&i.ID, &i.Name, &i.Command); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renameCommand = `-- name: RenameCommand :exec
UPDATE commands
SET name = ?
WHERE name = ?
`

type RenameCommandParams struct {
	Name   string
	Name_2 string
}

func (q *Queries) RenameCommand(ctx context.Context, arg RenameCommandParams) error {
	_, err := q.db.ExecContext(ctx, renameCommand, arg.Name, arg.Name_2)
	return err
}

const updateCommand = `-- name: UpdateCommand :exec
UPDATE commands
SET command = ?
WHERE name = ?
`

type UpdateCommandParams struct {
	Command string
	Name    string
}

func (q *Queries) UpdateCommand(ctx context.Context, arg UpdateCommandParams) error {
	_, err := q.db.ExecContext(ctx, updateCommand, arg.Command, arg.Name)
	return err
}

const updateCommandById = `-- name: UpdateCommandById :exec
UPDATE commands
SET name = ?, command = ?
WHERE id = ?
`

type UpdateCommandByIdParams struct {
	Name    string
	Command string
	ID      int64
}

func (q *Queries) UpdateCommandById(ctx context.Context, arg UpdateCommandByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateCommandById, arg.Name, arg.Command, arg.ID)
	return err
}
