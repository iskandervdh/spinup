// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: variables.sql

package sqlc

import (
	"context"
)

const createVariable = `-- name: CreateVariable :exec
INSERT INTO variables (
  name, value, project_id
) VALUES (
  ?, ?, ?
)
`

type CreateVariableParams struct {
	Name      string
	Value     string
	ProjectID int64
}

func (q *Queries) CreateVariable(ctx context.Context, arg CreateVariableParams) error {
	_, err := q.db.ExecContext(ctx, createVariable, arg.Name, arg.Value, arg.ProjectID)
	return err
}

const deleteVariable = `-- name: DeleteVariable :exec
DELETE FROM variables
WHERE name = ? AND project_id = ?
`

type DeleteVariableParams struct {
	Name      string
	ProjectID int64
}

func (q *Queries) DeleteVariable(ctx context.Context, arg DeleteVariableParams) error {
	_, err := q.db.ExecContext(ctx, deleteVariable, arg.Name, arg.ProjectID)
	return err
}

const getVariables = `-- name: GetVariables :many
SELECT name, value
FROM variables
WHERE project_id = ?
`

type GetVariablesRow struct {
	Name  string
	Value string
}

func (q *Queries) GetVariables(ctx context.Context, projectID int64) ([]GetVariablesRow, error) {
	rows, err := q.db.QueryContext(ctx, getVariables, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariablesRow
	for rows.Next() {
		var i GetVariablesRow
		if err := rows.Scan(&i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renameVariable = `-- name: RenameVariable :exec
UPDATE variables
SET name = ?
WHERE name = ? AND project_id = ?
`

type RenameVariableParams struct {
	Name      string
	Name_2    string
	ProjectID int64
}

func (q *Queries) RenameVariable(ctx context.Context, arg RenameVariableParams) error {
	_, err := q.db.ExecContext(ctx, renameVariable, arg.Name, arg.Name_2, arg.ProjectID)
	return err
}

const updateVariable = `-- name: UpdateVariable :exec
UPDATE variables
SET value = ?
WHERE name = ? AND project_id = ?
`

type UpdateVariableParams struct {
	Value     string
	Name      string
	ProjectID int64
}

func (q *Queries) UpdateVariable(ctx context.Context, arg UpdateVariableParams) error {
	_, err := q.db.ExecContext(ctx, updateVariable, arg.Value, arg.Name, arg.ProjectID)
	return err
}
