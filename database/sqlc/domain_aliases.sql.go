// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: domain_aliases.sql

package sqlc

import (
	"context"
)

const createDomainAlias = `-- name: CreateDomainAlias :exec
INSERT INTO domain_aliases (
  value, project_id
) VALUES (
  ?, ?
)
`

type CreateDomainAliasParams struct {
	Value     string
	ProjectID int64
}

func (q *Queries) CreateDomainAlias(ctx context.Context, arg CreateDomainAliasParams) error {
	_, err := q.db.ExecContext(ctx, createDomainAlias, arg.Value, arg.ProjectID)
	return err
}

const deleteDomainAlias = `-- name: DeleteDomainAlias :exec
DELETE FROM domain_aliases
WHERE value = ? AND project_id = ?
`

type DeleteDomainAliasParams struct {
	Value     string
	ProjectID int64
}

func (q *Queries) DeleteDomainAlias(ctx context.Context, arg DeleteDomainAliasParams) error {
	_, err := q.db.ExecContext(ctx, deleteDomainAlias, arg.Value, arg.ProjectID)
	return err
}

const getDomainAliases = `-- name: GetDomainAliases :many
SELECT value
FROM domain_aliases
WHERE project_id = ?
`

func (q *Queries) GetDomainAliases(ctx context.Context, projectID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getDomainAliases, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var value string
		if err := rows.Scan(&value); err != nil {
			return nil, err
		}
		items = append(items, value)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDomainAlias = `-- name: UpdateDomainAlias :exec
UPDATE domain_aliases
SET value = ?
WHERE value = ? AND project_id = ?
`

type UpdateDomainAliasParams struct {
	Value     string
	Value_2   string
	ProjectID int64
}

func (q *Queries) UpdateDomainAlias(ctx context.Context, arg UpdateDomainAliasParams) error {
	_, err := q.db.ExecContext(ctx, updateDomainAlias, arg.Value, arg.Value_2, arg.ProjectID)
	return err
}
